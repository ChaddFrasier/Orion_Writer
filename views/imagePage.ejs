<html>

    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes">

        <link rel="stylesheet", href="css/pips.css" type="text/css">

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
            integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

        <title>Image Edit</title>

        <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
    </head>

    <body>
        <!-- Page Header Block-->
        <img src="../images/usgsLogo.png" class="float-md-left" width="20%" height="auto" style="margin: 0%; padding: 0%">
        <div class="container">
            <div class="jumbotron text-center" >
                <h2>Edit the Cube Image</h2>      
                <p class="lead">First crop the image by selecting the crop button and clicking on the image</p>
                <p class="lead medium">Then add the icons by clicking the button for each icon and selecting the location on the image 1 at a time</p>
                <p ><em>Icons will be removed if they are placed before a crop action</em></p>
                <div style="display:inline;">
                    <a class="btn btn-primary btn-lg float-left" href="/" role="button">Upload New Cube</a>
                    <form method="POST" action="/imageDownload" display="inline" class=" float-right text-center">
                            <input type="hidden" value='<%= image %>' name="passedIMG">
                            <input type="submit" value="Save Raw Image" class="btn btn-secondary btn-lg" />
                    </form>
                </div>
            </div>
        </div>

        <!-- Loading GIF-->
        <div id="loading" class="float-md-right lead" style="visibility:visible">
            <img src="../images/loading.gif" class='float-center;' height="125px" weight="135px"/><br/>Loading
        </div>
        
        <!-- Button Interface-->
        <div class="container">
            <div class="float-center image-controls text-center">
                <button class="btn btn-primary btn-lg float-center" id="cropFlag"> Crop Image</button>
                <button id="backBtn" class="btn btn-primary btn-lg" onclick="loaderActivate()">Undo Crop</button>
            </div>
            <br/>
            <div class="float-center image-controls text-center">
                <button class="btn btn-primary btn-lg" id="northIconFlag">Add North Icon</button>
                <button class="btn btn-primary btn-lg" id="sunIconFlag">Add Sun Icon</button>
                <button class="btn btn-primary btn-lg" id="eyeFlag"> Add Eye Image</button><br><br>
                <button class="btn btn-primary btn-lg" id="exportBtn"> Export The Vector Image</button>
            </div>
        </div>
        <br/>

        <!-- Editor Box -->
        <svg id="svgWrapper" class="image-image"  viewBox="0 0 <%=w%> <%=h%>"> 
            <image id="crop" width="<%=w%>" height="<%=h%>" xlink:href="/<%=image%>"  clip-path="url(#image_box)"/>
            <defs>
                <clipPath id="image_box">
                    <rect x="0" y='0' width="<%=w%>" height="<%=h%>" style="fill:rgb(0,0,255);"/>
                </clipPath>
            </defs>        
            <rect id="cropOutline" x="0" y="0" width="5" height="5" style="fill:rgba(245, 13, 13, 0.15);pointer-events:none; stroke-width:2;stroke:rgb(255,0,0);" />
            <image id="northIcon" x="350" y="500" width="50" height="50" style="pointer-events:none;" xlink:href="/images/north.png"/>
            <image id="sunIcon" x="500" y="500" width="50" height="50" style="pointer-events:none;" xlink:href="/images/sun_symbol.png"/>
            <image id="eyeIcon" x="350" y="500" width="50" height="50" style="pointer-events:none;" xlink:href="/images/eye_symbol.png"/>
        </svg>

        <!-- Hidden Tags for data parsing-->
        <div id="metadata" style="display:none;"  class="text-center green-border-focus">
                <label for="metadata-text">
                    <h2>Metadata Output</h2>
                </label>
                <textarea readonly id="metadata-text" class="form-control bg-white text-dark" style="resize: vertical; font-size: 22px;"><%= tagField %></textarea>
            </div>
        
            <div id="metadata-tags" style="display:none;" class="text-center green-border-focus">
                <label for="metadataTagArea">
                    <h2>Metadata Tags</h2>
                </label>
                <textarea readonly id="metadataTagArea" class="form-control bg-white text-dark" style="resize: vertical; font-size: 22px;"></textarea>
            </div>
            <!-- Canvas for extracting inline svg-->
            <canvas id="canvasTest" width="<%=w%>px" height="<%=h%>px" style="display:none; border: 5px solid black; width:<%=w%>px; height:<%=h%>px;" ></canvas>


        <script type="text/javascript">

            // grab DOM elements that are needed
            var exportBtn =  document.getElementById('exportBtn');
            var northImage = document.getElementById("northIcon");
            var sunImage = document.getElementById("sunIcon");
            var eyeImage = document.getElementById('eyeIcon');
            var myImage = document.getElementById('crop');
            var outlineBox = document.getElementById('cropOutline');
            var svg = document.getElementById('svgWrapper');
            var loader = document.getElementById('loading');


            // set defaults
            outlineBox.style.visibility = 'hidden';
            svg.setAttribute('width',Number(<%= w %>));
            svg.setAttribute('height',Number(<%= h %>));
            
            // find icon dimensions
            let iconDim = getIconDim(<%= w %>, <%= h %>);
            
            // set icon dimensions acording to which side is larger
            if(iconDim[0] > iconDim[1]){
                setIconDimensions(iconDim[0]);
            }else{
                setIconDimensions(iconDim[1]);
            }

            // function to set attributes of the icons
            function setIconDimensions(dim){
                northImage.setAttribute('width',dim);
                northImage.setAttribute('height', dim);
                
                sunImage.setAttribute('width',dim);
                sunImage.setAttribute('height', dim);
                
                eyeImage.setAttribute('width',dim);
                eyeImage.setAttribute('height', dim);
                
            }

            // function to hide the loading gif
            function loadInvisible(){
                loader.style.visibility = 'hidden';    
            }
            // function to show the loading gif
            function loaderActivate(){
                loader.style.visibility = 'visible';
            }
            // function that calulates the icon sizes based on image size
            /** TODO: needs adjusting */
            function getIconDim(imageWidth, imageHeight){
                let iconW = imageWidth*.1;
                let iconH = imageHeight*.1;
            
        // ===============FOR TESTING================
        console.log('iconw: '+ iconW);
        console.log('iconh: '+ iconH);
        // ======================================
                if(iconW < 15 || iconH < 15){
                
                    return ['10','10'];
                }else{
                    return [iconW, iconH ]; 
                }
                
            }
            
            console.log(" image dimensions are => <%= w %>: <%= h %>");
            // set loader to invisible
            loadInvisible();
        </script>


        <script type="text/javascript">
            // function to convert client pixel values to svg DOM relative values
            function svgPoint(element, x, y) {
                // get a new svg point
                var pt = svg.createSVGPoint();
                // set the point x value to the passed x
                pt.x = x;
                // same for y
                pt.y = y;
                /* use matrixTransform to convert the x and y using getScreenCTM to capture
                    the browsers coordinate matrix */
                return pt.matrixTransform(element.getScreenCTM().inverse());    
            }
            
        </script>

        <script type="text/javascript">

            // set all flags to false to start
            var sunIconPlaced = false,
                northIconPlaced = false,
                eyeIconPlaced = false,
                doneResizing = false,
                northFlag = false,
                cropFlag = false, 
                sunFlag = false,
                eyeFlag = false,
                outlineVisible = false;
            
            //create clickArray
            var clickArray = [];


            // set defaults 
            northImage.style.visibility = 'hidden';
            sunImage.style.visibility = 'hidden';
            eyeImage.style.visibility = 'hidden';

            // on doc ready run the button logic and click capturing events
            $(document).ready(function() {
                // reset click array on a new load
                clickArray = [];

                // when the image registers a click
                $("image").on("click", function(event) {
                    
                    // capture event variables for px calculations
                    var t = event.target;
                    var x = event.clientX;
                    var y = event.clientY;
                
                    /* if the target is the svg DOM then keep it the same 
                        otherwise set it to the parent of the current target */
                    var target = (t == svg ? svg : t.parentNode);
                    // get the converted svg coordinates
                    var svgP = svgPoint(target, x, y);
                    // convert floats to integers
                    var x = parseInt(svgP.x),
                        y = parseInt(svgP.y);
                
                    // ======== FOR TESTING=======
                    console.log("x is: " + x);
                    console.log("y is:" + y);
                    // ===========================

                    // if any of the flags are true
                    if(northFlag || cropFlag || sunFlag || eyeFlag){

                        /* and if the click array is either length = 0 or the clicks are in 
                            a proper location for cropping capture the click in the clickArray */
                        if(clickArray.length < 1 || clickArray[0]<x || clickArray[1]< y){
                            captureClick(x,y);
                            // check click array
                            console.log(clickArray);
                        }
                        
                        // Then if the click flag is true and the length of the array is 2
                        if(cropFlag && clickArray.length === 2){
                            // set the dimensions and visibilty of the outline box
                            outlineBox.style.visibility = 'visible';
                            outlineVisible = true;
                            outlineBox.setAttribute('x',clickArray[0]);
                            outlineBox.setAttribute('y',clickArray[1]);
                        }

                        // Chekc for icon flags and set the needed icon location
                        if(northFlag){
                            
                            // if the click location is too close to the edge dont draw the icon
                            if(x < svg.getAttribute('width') - parseInt(northImage.getAttribute('width'))
                                && y < svg.getAttribute('height') - parseInt(northImage.getAttribute('height'))){
                                // if it passes set all attributes for displaying and set flags
                                northImage.setAttribute('x',x);
                                northImage.setAttribute('y',y);
                                northImage.style.visibility = 'visible';
                                northIconPlaced = true;
                                document.getElementById('northIconFlag').innerHTML = "Remove?";
                                northFlag = false;
                                // reset the clickArray
                                clickArray = [];
                            }
                            
                        }
                        // repeat the process for the other icons
                        else if(eyeFlag){
                            
                            if(x < svg.getAttribute('width') - parseInt(eyeImage.getAttribute('width'))
                                && y < svg.getAttribute('height') - parseInt(eyeImage.getAttribute('height'))){

                                eyeImage.setAttribute('x',x);
                                eyeImage.setAttribute('y',y);
                                eyeImage.style.visibility = 'visible';
                                eyeIconPlaced = true;
                                document.getElementById('eyeFlag').innerHTML = "Remove?";
                                eyeFlag = false;

                                clickArray = [];
                            }
                        }
                        else if(sunFlag){
                            if(x < svg.getAttribute('width') - parseInt(sunImage.getAttribute('width'))
                                && y < svg.getAttribute('height') - parseInt(sunImage.getAttribute('height'))){

                                sunImage.setAttribute('x',x);
                                sunImage.setAttribute('y',y);
                                sunImage.style.visibility = 'visible';
                                sunIconPlaced = true;
                                document.getElementById('sunIconFlag').innerHTML = "Remove?";
                                sunFlag = false;

                                clickArray = [];
                            }
                        }
                        // if the crop flag is true and the length of the click array is 4 crop the image
                        else if( cropFlag && clickArray.length === 4){
                            // activate loader gif 
                            loaderActivate();
                            // set done resizeing flag
                            doneResizing = true;
                            //get the array string for the request
                            let arrayStr = clickArray.toString();
                            // prevent defaults 
                            event.preventDefault();
                            // send ajax POST request through http
                            $.ajax({
                                type: 'POST',
                                cache: false,
                                url: 'http://localhost:8080/crop?cropArray=' + arrayStr + '&currentImage=' +'<%= image %>',
                                success: function(response) { 
                                    // on success load the new html data into the page    
                                    $("html").html(response);
                                    // set the loader to invisible
                                    loadInvisible();
                                    // reset clickarray
                                    clickArray = [];
                                    // reset flag
                                    cropFlag = false;
                                },
                                error: function(xhr, status, err) {
                                    // on error log the error
                                    console.log(xhr.responseText);
                                    alert('Crop Failed');
                                    loadInvisible();
                                }
                            });
                            
                        }
                    } 
                }); // end image click

                // set values for calculating outline box size 
                var mouseX,
                    mouseY,
                    startX,
                    startY,
                    minDim = 100;
                    

                $('#crop').mousemove(function(event){
                    
                    // set event variables
                    var t = event.target;
                    var x = event.clientX;
                    var y = event.clientY;
                
                    // get proper svg as target
                    var target = (t == svg ? svg : t.parentNode);
                    
                    // get new svg relative point
                    var svgP = svgPoint(target, x, y);
                    // convert to int
                    mouseX = parseInt(svgP.x),
                    mouseY = parseInt(svgP.y);
                    
                    // only adjust the box if currently croppping
                    if(!doneResizing && clickArray.length > 1){
                        adjustBox();
                    }
                });
            
                // function to change the outline box dimensions to the calulated size
                function adjustBox(){
                    // get start points of the crop
                    startX = clickArray[0];
                    startY = clickArray[1];

                    // convert number and do the math
                    let w = Number(mouseX) - startX;
                    let h = Number(mouseY) - startY;

                    // sets minimum dimensions for crop box
                    if(w < minDim){
                        w = minDim;
                    } 
                    if(h < minDim){
                        h = minDim;
                    }
                    // reset the outline box if the values are not NaN
                    if(w !== NaN && h !== NaN){
                        outlineBox.setAttribute('width' , w);
                        outlineBox.setAttribute('height' , h);
                    }
                } 

                // when north button is clicked
                $('#northIconFlag').click(function(){
                    // change north flag
                    northFlag = !northFlag;

                    // if north flag is placed currently remove it
                    if(northIconPlaced){
                        northIconPlaced = !northIconPlaced;
                        northImage.style.visibility = 'hidden';
                        northFlag = !northFlag;
                    }
                    
                    // otherwise set the other flags to false and adjust their html
                    if(northFlag){
                        if(sunFlag && !sunIconPlaced){
                            sunFlag = false;
                            document.getElementById('sunIconFlag').innerHTML = "Add Sun Icon";
                        }

                        if(eyeFlag && !eyeIconPlaced){
                            eyeFlag = false;
                            document.getElementById('eyeFlag').innerHTML = "Add Eye Icon";
                        }

                        cropFlag = false;
                        document.getElementById('cropFlag').innerHTML = "Crop Image";
                        outlineBox.style.visibility = 'hidden';
                        
                        document.getElementById('northIconFlag').innerHTML = "Cancel?";
                    }
                    else{
                        // if cancel is clicked
                        clickArray = [];
                        document.getElementById('northIconFlag').innerHTML = "Add North Icon";

                        if(cropFlag){
                            cropFlag = !cropFlag;
                            document.getElementById('cropFlag').innerHTML = "Crop Image";
                            outlineBox.style.visibility = 'hidden';
                        }
                    }
                    clickArray = [];
                });


                // use same logic for other button
                $('#eyeFlag').click(function(){
                    eyeFlag = !eyeFlag;

                    if(eyeIconPlaced){
                        eyeIconPlaced = !eyeIconPlaced;
                        eyeImage.style.visibility = 'hidden';
                        eyeFlag = !eyeFlag;
                    }
                    
                    if(eyeFlag){
                        if(sunFlag && !sunIconPlaced){
                            sunFlag = false;
                            document.getElementById('sunIconFlag').innerHTML = "Add Sun Icon";
                        }

                        if(northFlag && !northIconPlaced){
                            northFlag = false;
                            document.getElementById('northIconFlag').innerHTML = "Add North Icon";
                        }

                        cropFlag = false;
                        document.getElementById('cropFlag').innerHTML = "Crop Image";
                        outlineBox.style.visibility = 'hidden';
                        
                        document.getElementById('eyeFlag').innerHTML = "Cancel?";
                    }
                    else{
                        clickArray = [];
                        document.getElementById('eyeFlag').innerHTML = "Add Eye Icon";

                        if(cropFlag){
                            cropFlag = !cropFlag;
                            document.getElementById('cropFlag').innerHTML = "Crop Image";
                            outlineBox.style.visibility = 'hidden';
                        
                        }
                    }
                    clickArray = [];
                });

                // use same logic for other button
                $('#sunIconFlag').click(function(){
                    sunFlag = !sunFlag;

                    if(sunIconPlaced){
                        sunIconPlaced = !sunIconPlaced;
                        sunImage.style.visibility = 'hidden';
                        sunFlag = !sunFlag;
                            
                    }
                    
                    if(sunFlag){
                        if(northFlag && !northIconPlaced){
                            northFlag = false;
                            document.getElementById('northIconFlag').innerHTML = "Add North Icon";
                        }

                        if(eyeFlag && !eyeIconPlaced){
                            eyeFlag = false;
                            document.getElementById('eyeFlag').innerHTML = "Add Eye Icon";
                        }
                        
                        cropFlag = false;
                        outlineBox.style.visibility = 'hidden';
                        
                        document.getElementById('cropFlag').innerHTML = "Crop Image";
                        document.getElementById('sunIconFlag').innerHTML = "Cancel?";
                    }
                    else{
                        
                        document.getElementById('sunIconFlag').innerHTML = "Add Sun Icon";
                        if(cropFlag){
                            cropFlag = !cropFlag;
                            document.getElementById('cropFlag').innerHTML = "Crop Image";
                            outlineBox.style.visibility = 'hidden';
                        
                        }
                    }
                    clickArray = [];
                });



                // use same logic for other button
                $("#cropFlag").click(function(){
                    cropFlag = !cropFlag;

                    if(cropFlag){
                        if(northFlag && !northIconPlaced){
                            northFlag = false
                            document.getElementById('northIconFlag').innerHTML = "Add North Icon";
                        }
                        if(sunFlag && !sunIconPlaced){
                            sunFlag = false;
                            document.getElementById('sunIconFlag').innerHTML = "Add Sun Icon";
                        }
                        if(eyeFlag && !eyeIconPlaced){
                            eyeFlag = false;
                            document.getElementById('eyeFlag').innerHTML = "Add Eye Icon";
                        }

                        document.getElementById('cropFlag').innerHTML = "Cancel?";
                        
                    }else{
                        clickArray = [];
                        document.getElementById('cropFlag').innerHTML = "Crop Image";
                        outlineBox.style.visibility = 'hidden';
                    }
                    
                });


                // check interval to reset any buttons in conjuction with their flags
                //setInterval(checkBtns(),1000);

                // function to set button text according to their flags
                // TODO: May not be needed 
                function checkBtns(){
                    if(!cropFlag){
                        document.getElementById('cropFlag').innerHTML = "Crop Image";
                        outlineBox.style.visibility = 'hidden';
                    }
                    if(!northFlag){
                        document.getElementById('northIconFlag').innerHTML = "Add North Icon";
                    }
                    if(northIconPlaced){
                            document.getElementById('northIconFlag').innerHTML = "Remove?";
                        }
                    if(!sunFlag){
                        document.getElementById('sunIconFlag').innerHTML = "Add Sun Icon";
                        
                    }
                    if(sunIconPlaced){
                            document.getElementById('sunIconFlag').innerHTML = "Remove?";
                        }

                    if(!eyeFlag){
                        document.getElementById('eyeFlag').innerHTML = "Add Eye Icon";
                        
                    }
                    if(eyeIconPlaced){
                            document.getElementById('eyeFlag').innerHTML = "Remove?";
                        }
                }

                // button to undo the cropped image
                $("#backBtn").on('click',function(event){
                    event.preventDefault();

                    var currentImg = '<%= image %>';

                    console.log(currentImg);

                    // if the image has been cropped then get the previous image
                    if(currentImg.indexOf('_crop.png') > -1){
                        // ajax request for the data sending the current image link
                        $.ajax({
                            type: 'GET',
                            
                            cache: false,
                            url: 'http://localhost:8080/crop?currentImage=' +'<%= image %>',
                            success: function(response) {
                                $("html").html(response);
                            
                                
                            },
                            error: function(xhr, status, err) {
                                console.log(xhr.responseText);
                                loadInvisible();
                                
                            }
                        });
                    }else{
                        // if the current image is the base image then alert the user
                        loadInvisible();
                        alert('Base Image:\nCannot Be Undone');
                    }

                    
                });
            }); // end doc.ready
            
            // function to push the x,y coordinates into the clickArray
            function captureClick(x,y){
                clickArray.push(x);
                clickArray.push(y);
            }

            
            // Export Section

            // download works well for pngs
            function triggerDownload (imgURI) {
                var evt = new MouseEvent('click', {
                    view: window,
                    bubbles: false,
                    cancelable: true
                });
                var a = document.createElement('a');
                a.setAttribute('download', 'testing.png');
                a.setAttribute('href', imgURI);
                a.setAttribute('target', '_blank');

                a.dispatchEvent(evt);
            }

            // get the image element
            var image = document.getElementById('crop');
            
            // when the export is clicked
            exportBtn.addEventListener('click', function () {
                
                // get the svg element and the canvas information
                
                var canvas = document.getElementById('canvasTest');
                var ctx = canvas.getContext('2d');

                var data = (new XMLSerializer()).serializeToString(svg);
                var DOMURL = window.URL || window.webkitURL || window;

                var img = new Image();
                var svgBlob = new Blob([data], {type: 'image/svg+xml;charset=utf-8'});
                var url = DOMURL.createObjectURL(svgBlob);

                
                    
                // draw the image into the canvas
                ctx.drawImage(image, dx=0, dy=0,dWidth=image.width.animVal.value, dHeight=image.height.animVal.value);

                // check to see if the flags are true and impose the image 
                if(sunIconPlaced){
                    ctx.drawImage(sunImage, dx=sunImage.x.animVal.value,dy=sunImage.y.animVal.value, dWidth=sunImage.width.animVal.value  , dHeight=sunImage.height.animVal.value );
                }
                if(northIconPlaced){
                    ctx.drawImage(northImage, dx=northImage.x.animVal.value,dy=northImage.y.animVal.value, dWidth=northImage.width.animVal.value  , dHeight=northImage.height.animVal.value );
                }
                if(eyeIconPlaced){
                    ctx.drawImage(eyeImage, dx=eyeImage.x.animVal.value,dy=eyeImage.y.animVal.value, dWidth=eyeImage.width.animVal.value  , dHeight=eyeImage.height.animVal.value );
                }
                    
                // revoke the url
                DOMURL.revokeObjectURL(url);

                try{
                    // export and png only
                    var imgURI = canvas
                    .toDataURL('image/png', 1.0)
                    .replace('image/png', 'image/octet-stream');

                    triggerDownload(imgURI);
                                
                }catch(err){
                    alert('Image is too large to save from browser');
                }

                try{
                    img.src = url;
                }catch(err){
                    console.log('source could not be located');
                }
            });
        </script>
        <!-- Legend Section-->
        <div class="float-center text-center" style="margin-left:auto; margin-right:auto; padding: 1%;">
            <h1 style="padding-top:1%;padding-bottom:1%; margin-bottom: 0%;">Image Legend</h1>
            <table class="float-center text-center" style="margin-left:auto; margin-right:auto; margin-top: 0px;">
                <tr>
                    <td>
                        <svg id="legend-image" width="450" height="200">
                            <rect width="100%" height="100%" rx="10" ry="10" style="fill:rgb(233, 236, 239);">
                            </rect>
                            <foreignObject x="10" y="10" width="100%" height="100%">
                                <table class="float-center" id="legend-table">
                                    <tr id="north">
                                        <th>North:</th>
                                        <th><img id="northImg" src="images/north.png" width="25" preserveAspectratio="xMaxYMid meet" height="25"><img/></th>
                                        <th id="northDeg">0 degrees</th>
                                    </tr>
                                    <tr id="sun-az">
                                        <th>Sun Azimuthal Direction:</th>
                                        <th><img id="sunImg" src="images/sun_symbol.png" width="25" height="25"></img></th>
                                        <th id="sunDeg">0 degrees</th>
                                    </tr>
                                    <tr id="obs-az">
                                        <th>Observer Azimuthal Direction:</th>
                                        <th><img id="observerImg" src="images/eye_symbol.png" width="25" height="25"></img></th>
                                        <th id="obsDeg">0 degrees</th>
                                    </tr>
                                    <tr id="image-scalebar" style="overflow:hidden;">
                                        <th>Scalebar:</th>
                                        <th><img src="images/arrow.png" width="25" height="25"></img></th>
                                        <th id="scaleDeg">0 degrees</th>
                                    </tr>   
                                </table>
                            </foreignObject>
                            <line id="observerArrow" x1="0" y1="0" x2="50" y2="0" style="stroke:rgb(255,0,0);stroke-width:2; display:none;"/>
                            <line id="sunArrow" x1="0" y1="0" x2="50" y2="0" style="stroke:rgb(255,0,0);stroke-width:2; display:none;"/>
                        </svg>
                    </td>
                    <td valign="top">
                        <div class="float-center" style="align-content: center; width: 300px; height: auto; margin: auto;">
                            <div id="hide-legend" class="float-center" style="text-align: left;">
                                <table style="text-align:left;">
                                    <tr><h4>Hide Legend Elements</h4></tr>
                                    <tr><input type="checkbox" id="north-radio" name="leg" checked>North Arrow</input><br/></tr>
                                    <tr><input type="checkbox" id="sun-radio" name="leg" checked>Sun Azimuthal Direction</input><br/></tr>
                                    <tr><input type="checkbox" id="obs-radio" name="leg" checked>Observer Azimuthal Direction</input><br/></tr>
                                    <tr><input type="checkbox" id="scalebar-radio" name="leg" checked>Scalebar</input><br/></tr>
                                </table>
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        
        <!-- Exporting The Legend-->
        <div id="legend-export-div" style="margin-left:35%;">
        </div>
                                                                    
        <script>
            function exportLegend(){
                var div = document.getElementById("legend-export-div");
                html2canvas(document.querySelector("#legend-table")).then(function(canvas) {
                    document.getElementById("legend-export-div").append(canvas);        
                    //document.body.appendChild(canvas);
                });
            }
        </script>
        <script>
            function hideNorth(){
                document.getElementById("north").style.display = "none";
                //console.log("Hiding North");
            }
            function showNorth(){
                document.getElementById("north").style.display = "table-row";
                //console.log("Showing North");
            }
            function hideSun(){
                document.getElementById("sun-az").style.display = "none";
            }
            function showSun(){
                document.getElementById("sun-az").style.display = "table-row";
            }
            function hideObs(){
                document.getElementById("obs-az").style.display = "none";
            }
            function showObs(){
                document.getElementById("obs-az").style.display = "table-row";
            }
            function hideScale(){
                document.getElementById("image-scalebar").style.display = "none";
                //console.log("Showinfgejnhfkjshdf");
            }
            function showScale(){
                document.getElementById("image-scalebar").style.display = "table-row";
                //console.log("actually show");
            }

            // function to hide the elements in the legend area
            function showHide(){
                var northRadio = document.getElementById("north-radio").checked;
                var sunRadio = document.getElementById("sun-radio").checked;
                var obsRadio = document.getElementById("obs-radio").checked;
                var scalebarRadio = document.getElementById("scalebar-radio").checked;
                if(!northRadio){
                    hideNorth();
                }else{
                    showNorth();
                }
                if(!sunRadio){
                    hideSun();
                }else{
                    showSun();
                }
                if(!obsRadio){
                    hideObs();
                }else{
                    showObs();
                }
                if(!scalebarRadio){
                    hideScale();
                }else{
                    showScale();
                }
            }
            setInterval(showHide, 1000);
        </script>

        <script>
            // Gets Important Metadata from the "metadata-text" div
            function getMetadata(){
                // get value string from hidden DOM element
                var metadata = document.getElementById("metadata-text").innerHTML;
                // parse back into JSON
                var metadataString = JSON.parse(metadata);
                
                // Important Metadata Values
                var northDegree = metadataString['NorthAzimuth'];
                var sunDegree = metadataString['SubSolarAzimuth'];
                var observerDegree = metadataString['SubSpacecraftGroundAzimuth'];
                var scale = metadataString['SampleResolution'];

                // ======= Hard Coding North Arrow For Testing =========
                northDegree = 90;
                // ==================================================

                // TODO: generate an arrow in the proper direction in relation to the degree of the sun and eye angles
                if(northDegree == "None"){
                    document.getElementById("north-radio").checked = false;
                }else{
                    setLegendAngle("northImg", "northDeg", northDegree);
                }

                if(sunDegree == "None"){
                    document.getElementById("sun-radio").checked = false;
                }

                if(observerDegree == "None"){
                    document.getElementById("obs-radio").checked = false;
                }

                // scale will be generated using the SampleResolution and the size of the image (meters/px)
                if(scale == "None"){
                    document.getElementById("scalebar-radio").checked = false;
                }
            }

            // set the arrow directions and recieve the data
            getMetadata();
            
            // Set Legend North Angle Angle
            function setLegendAngle(img, degree, value){
                // get the image element and the element to display the angle degree
                let image = document.getElementById(String(img));
                let deg = document.getElementById(String(degree));
                // rotate the value using css transform
                let rotateVal = String("transform: rotate(" + String(value) + "deg);");
                // transform about the origin
                image.setAttribute("transform-origin", "50%; 50%;");
                // change the html angle display
                deg.innerHTML = String(value) + "degrees";

                // set the new style for the image
                image.setAttribute("style", rotateVal);
            }

            // Generate Arrow Legend Icons
            function setLegendArrow(img, arrow, deg, value){
                var image = document.getElementById(String(img));
                //var arrow = document.getElementById();
            }

        /*  //========== This Function is for testing the Rotation Orgin Point ===============
            i = 0;
            setInterval(function(){
                i += 1;
                setLegendAngle("northImg", "northDeg", i);
            }, 1000);
            //============================================================================ */
        </script>
        
    </body>
</html>
